#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- log(reds) - log(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- log(greens) - log(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- sum(product_vector) + (lfactorial(draws) - lfactorial(successes) - lfactorial(draws-successes))
return(prob)
}
probability_joe_and_mary_log <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + find_prob_log(successes=i, number_balls=n, draws=k) + find_prob_log(successes=i, number_balls=m, draws=k)
}
return(p_joe_and_mary)
}
for(i in 0:4) {
print("log func")
find_prob(successes=i, number_balls=20, draws=4)
print("reg func")
find_prob_log(successes=i, number_balls=20, draws=4)
}
knitr::opts_chunk$set(echo = TRUE)
# Inputs are succeses (x), number of balls (n), and draws (k)
find_prob <- function(successes, number_balls, draws) {
#variables for both red and green balls
reds <- number_balls
greens <- number_balls
#index for appending in R (it seems there is no .append() function in R like in python...)
index <- 1
#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- reds/(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- greens/(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- prod(product_vector)*choose(draws,successes)
return(prob)
}
probability_joe_and_mary <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + find_prob(successes=i, number_balls=n, draws=k)*find_prob(successes=i, number_balls=m, draws=k)
}
return(p_joe_and_mary)
}
probability_joe_and_mary(n=20, m=30, k=1)
probability_joe_and_mary(n=20, m=30, k=2)
probability_joe_and_mary(n=200, m=300, k=2)
probability_joe_and_mary(n=2000, m=3000, k=2)
probability_joe_and_mary(n=50, m=60, k=17)
probability_joe_and_mary(n=600, m=500, k=400)
# Inputs are succeses (x), number of balls (n), and draws (k)
find_prob_log <- function(successes, number_balls, draws) {
#variables for both red and green balls
reds <- number_balls
greens <- number_balls
#index for appending in R (it seems there is no .append() function in R like in python...)
index <- 1
#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- log(reds) - log(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- log(greens) - log(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- sum(product_vector) + (lfactorial(draws) - lfactorial(successes) - lfactorial(draws-successes))
return(prob)
}
probability_joe_and_mary_log <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + find_prob_log(successes=i, number_balls=n, draws=k) + find_prob_log(successes=i, number_balls=m, draws=k)
}
return(p_joe_and_mary)
}
for(i in 0:4) {
print("log func")
print(find_prob(successes=i, number_balls=20, draws=4))
print("reg func")
print(find_prob_log(successes=i, number_balls=20, draws=4))
}
knitr::opts_chunk$set(echo = TRUE)
# Inputs are succeses (x), number of balls (n), and draws (k)
find_prob <- function(successes, number_balls, draws) {
#variables for both red and green balls
reds <- number_balls
greens <- number_balls
#index for appending in R (it seems there is no .append() function in R like in python...)
index <- 1
#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- reds/(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- greens/(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- prod(product_vector)*choose(draws,successes)
return(prob)
}
probability_joe_and_mary <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + find_prob(successes=i, number_balls=n, draws=k)*find_prob(successes=i, number_balls=m, draws=k)
}
return(p_joe_and_mary)
}
probability_joe_and_mary(n=20, m=30, k=1)
probability_joe_and_mary(n=20, m=30, k=2)
probability_joe_and_mary(n=200, m=300, k=2)
probability_joe_and_mary(n=2000, m=3000, k=2)
probability_joe_and_mary(n=50, m=60, k=17)
probability_joe_and_mary(n=600, m=500, k=400)
# Inputs are succeses (x), number of balls (n), and draws (k)
find_prob_log <- function(successes, number_balls, draws) {
#variables for both red and green balls
reds <- number_balls
greens <- number_balls
#index for appending in R (it seems there is no .append() function in R like in python...)
index <- 1
#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- log(reds) - log(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- log(greens) - log(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- sum(product_vector) + (lfactorial(draws) - lfactorial(successes) - lfactorial(draws-successes))
return(prob)
}
probability_joe_and_mary_log <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + find_prob_log(successes=i, number_balls=n, draws=k) + find_prob_log(successes=i, number_balls=m, draws=k)
}
return(p_joe_and_mary)
}
for(i in 0:4) {
print("log func")
print(find_prob(successes=i, number_balls=20, draws=4))
print("reg func")
print(exp(find_prob_log(successes=i, number_balls=20, draws=4)))
}
knitr::opts_chunk$set(echo = TRUE)
# Inputs are succeses (x), number of balls (n), and draws (k)
find_prob <- function(successes, number_balls, draws) {
#variables for both red and green balls
reds <- number_balls
greens <- number_balls
#index for appending in R (it seems there is no .append() function in R like in python...)
index <- 1
#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- reds/(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- greens/(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- prod(product_vector)*choose(draws,successes)
return(prob)
}
probability_joe_and_mary <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + find_prob(successes=i, number_balls=n, draws=k)*find_prob(successes=i, number_balls=m, draws=k)
}
return(p_joe_and_mary)
}
probability_joe_and_mary(n=20, m=30, k=1)
probability_joe_and_mary(n=20, m=30, k=2)
probability_joe_and_mary(n=200, m=300, k=2)
probability_joe_and_mary(n=2000, m=3000, k=2)
probability_joe_and_mary(n=50, m=60, k=17)
probability_joe_and_mary(n=600, m=500, k=400)
# Inputs are succeses (x), number of balls (n), and draws (k)
find_prob_log <- function(successes, number_balls, draws) {
#variables for both red and green balls
reds <- number_balls
greens <- number_balls
#index for appending in R (it seems there is no .append() function in R like in python...)
index <- 1
#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- log(reds) - log(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- log(greens) - log(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- sum(product_vector) + (lfactorial(draws) - lfactorial(successes) - lfactorial(draws-successes))
return(prob)
}
probability_joe_and_mary_log <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + exp(find_prob_log(successes=i, number_balls=n, draws=k) + find_prob_log(successes=i, number_balls=m, draws=k))
}
return(p_joe_and_mary)
}
for(i in 0:2) {
print("log func")
print(find_prob(successes=i, number_balls=20, draws=2))
print("reg func")
print(exp(find_prob_log(successes=i, number_balls=20, draws=2)))
}
for(i in 0:2) {
print("log func")
print(probability_joe_and_mary(n=20, m=20, k=i))
print("reg func")
print(probability_joe_and_mary_log(n, m, k=i))
}
knitr::opts_chunk$set(echo = TRUE)
# Inputs are succeses (x), number of balls (n), and draws (k)
find_prob <- function(successes, number_balls, draws) {
#variables for both red and green balls
reds <- number_balls
greens <- number_balls
#index for appending in R (it seems there is no .append() function in R like in python...)
index <- 1
#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- reds/(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- greens/(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- prod(product_vector)*choose(draws,successes)
return(prob)
}
probability_joe_and_mary <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + find_prob(successes=i, number_balls=n, draws=k)*find_prob(successes=i, number_balls=m, draws=k)
}
return(p_joe_and_mary)
}
probability_joe_and_mary(n=20, m=30, k=1)
probability_joe_and_mary(n=20, m=30, k=2)
probability_joe_and_mary(n=200, m=300, k=2)
probability_joe_and_mary(n=2000, m=3000, k=2)
probability_joe_and_mary(n=50, m=60, k=17)
probability_joe_and_mary(n=600, m=500, k=400)
# Inputs are succeses (x), number of balls (n), and draws (k)
find_prob_log <- function(successes, number_balls, draws) {
#variables for both red and green balls
reds <- number_balls
greens <- number_balls
#index for appending in R (it seems there is no .append() function in R like in python...)
index <- 1
#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- log(reds) - log(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- log(greens) - log(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- sum(product_vector) + (lfactorial(draws) - lfactorial(successes) - lfactorial(draws-successes))
return(prob)
}
probability_joe_and_mary_log <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + exp(find_prob_log(successes=i, number_balls=n, draws=k) + find_prob_log(successes=i, number_balls=m, draws=k))
}
return(p_joe_and_mary)
}
for(i in 0:2) {
print("log func")
print(find_prob(successes=i, number_balls=20, draws=2))
print("reg func")
print(exp(find_prob_log(successes=i, number_balls=20, draws=2)))
}
for(i in 0:2) {
print("log func")
print(probability_joe_and_mary(n=20, m=20, k=i))
print("reg func")
print(probability_joe_and_mary_log(n=20, m=20, k=i))
}
knitr::opts_chunk$set(echo = TRUE)
# Inputs are succeses (x), number of balls (n), and draws (k)
find_prob <- function(successes, number_balls, draws) {
#variables for both red and green balls
reds <- number_balls
greens <- number_balls
#index for appending in R (it seems there is no .append() function in R like in python...)
index <- 1
#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- reds/(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- greens/(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- prod(product_vector)*choose(draws,successes)
return(prob)
}
probability_joe_and_mary <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + find_prob(successes=i, number_balls=n, draws=k)*find_prob(successes=i, number_balls=m, draws=k)
}
return(p_joe_and_mary)
}
probability_joe_and_mary(n=20, m=30, k=1)
probability_joe_and_mary(n=20, m=30, k=2)
probability_joe_and_mary(n=200, m=300, k=2)
probability_joe_and_mary(n=2000, m=3000, k=2)
probability_joe_and_mary(n=50, m=60, k=17)
probability_joe_and_mary(n=600, m=500, k=400)
# Inputs are succeses (x), number of balls (n), and draws (k)
find_prob_log <- function(successes, number_balls, draws) {
#variables for both red and green balls
reds <- number_balls
greens <- number_balls
#index for appending in R (it seems there is no .append() function in R like in python...)
index <- 1
#variable to track how many reds have been drawn so far
red_success <- 0
#vector to track the products
product_vector <- c()
# This loop runs k times.
for(i in 1:draws) {
if(red_success < successes) {
product_vector[i] <- log(reds) - log(reds + greens)
red_success <- red_success + 1
reds <- reds - 1
if(reds == 0) {
print("No more reds, result should be 0.")
}
}else {
product_vector[i] <- log(greens) - log(reds + greens)
greens <- greens - 1
if(greens == 0) {
print("No more greens, result should be 0.")
}
}
}
#multiply the product of the occurences by the number of possible events that create the product.
prob <- sum(product_vector) + (lfactorial(draws) - lfactorial(successes) - lfactorial(draws-successes))
return(prob)
}
probability_joe_and_mary_log <- function(n, m, k) {
p_joe_and_mary <- 0
for(i in 0:k) {
p_joe_and_mary <- p_joe_and_mary + exp(find_prob_log(successes=i, number_balls=n, draws=k) + find_prob_log(successes=i, number_balls=m, draws=k))
}
return(p_joe_and_mary)
}
for(i in 0:2) {
print("log func")
print(find_prob(successes=i, number_balls=20, draws=2))
print("reg func")
print(exp(find_prob_log(successes=i, number_balls=20, draws=2)))
}
for(i in 0:2) {
print("log func")
print(probability_joe_and_mary(n=20, m=20, k=i))
print("reg func")
print(probability_joe_and_mary_log(n=20, m=20, k=i))
}
probability_joe_and_mary_log(n=6000,m=5000,k=4000)
