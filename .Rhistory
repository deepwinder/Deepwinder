# Question 3
# Joe draws k balls from an urn containing n red balls and n green balls
# Mary draws k balls from an urn containing m red balls and m green balls
# For both cases, the balls are not replaced after they are drawn.
#
# We want to compute the probability that Joe and Mary will draw the same # of red balls.
myFunction <- function(n, m, k) {
if() {
}
}
# Question 3
# Joe draws k balls from an urn containing n red balls and n green balls
# Mary draws k balls from an urn containing m red balls and m green balls
# For both cases, the balls are not replaced after they are drawn.
#
# We want to compute the probability that Joe and Mary will draw the same # of red balls.
# Main Function
myFunction <- function(n, m, k) {
# Requirements for inputs to function.
if((n < 0) | (m < 0) | (k < 0) | (2*n < k) | (2*m < k)) {
return(FALSE)
}
# Assuming inputs are valid:
# n∈{0,1,2, ... , n} is the sample space for joe when choosing red balls
sample_space_joe = seq(from = 0, to = n)
# m∈{0,1,2, ... , m} is the sample space for mary when choosing red balls
sample_space_mary = seq(from = 0, to = m)
return(TRUE)
}
myFunction(1,1,1)
help(choose)
# Question 3
# Joe draws k balls from an urn containing n red balls and n green balls
# Mary draws k balls from an urn containing m red balls and m green balls
# For both cases, the balls are not replaced after they are drawn.
#
# We want to compute the probability that Joe and Mary will draw the same # of red balls.
# Main Function
myFunction <- function(n, m, k) {
# Requirements for inputs to function.
if((n < 0) | (m < 0) | (k < 0) | (2*n < k) | (2*m < k)) {
return(FALSE)
}
# Assuming inputs are valid:
total_possibilities_joe = choose(2*n, k)
total_possibilities_mary = choose(2*m, k)
return(total_possibilities_joe, total_possibilities_mary)
}
myFunction(n = 4, m = 5, k = 2)
# Question 3
# Joe draws k balls from an urn containing n red balls and n green balls
# Mary draws k balls from an urn containing m red balls and m green balls
# For both cases, the balls are not replaced after they are drawn.
#
# We want to compute the probability that Joe and Mary will draw the same # of red balls.
# Main Function
myFunction <- function(n, m, k) {
# Requirements for inputs to function.
if((n < 0) | (m < 0) | (k < 0) | (2*n < k) | (2*m < k)) {
return(FALSE)
}
# Assuming inputs are valid:
total_possibilities_joe = choose(2*n, k)
total_possibilities_mary = choose(2*m, k)
print(total_possibilities_joe)
print(total_possibilities_mary)
return(0)
}
myFunction(n = 4, m = 5, k = 2)
n = 8
k = 2
sum <- 0
for(i in 0:2) {
sum <- sum + (choose(n,k)*(0.5^(k))*(0.5^(n-k)))
}
print(sum)
n = 8
k = 8
sum <- 0
for(i in 0:2) {
sum <- sum + (choose(n,k)*(0.5^(k))*(0.5^(n-k)))
}
print(sum)
prob <- choose(60,20)*(0.5^(60))
prob
prob_20 <- dbinom(20, size=60, prob=0.5)
prob_25 <- dbinom(25, size=60, prob=0.5)
prob_30 <- dbinom(30, size=60, prob=0.5)
probabilities <- c(prob_20, prob_25, prob_30)
for(probability in probabilities) {
print(probability)
}
prob_test <- function(n, k) {
# x = red balls left
# y = green balls left
probabilities <- list()
x <- n
y <- n
for(i in 0:k) {
prob <- (choose((x+y),k)*((x/y)^(k))*((y/x)^(n-k)))
prob2 <- (choose((x+y),k)*((y/x)^(k))*((x/y)^(n-k)))
print(prob)
print(prob2)
}
}
prob_test(5,3)
